#include <iostream>
#include <stack>
using namespace std;
// insertatbottom

void bottomsq(stack<int>& st,int ele){
    if(st.empty()){
        st.push(ele);
        return;
    }
    int temp=st.top();
    st.pop();
    
    bottomsq(st,ele);
    st.push(temp);
}
void insertatbottom(stack<int>& st){
    if(st.empty()){
        cout<<"cannot insert";
        return;
    }
    int ele=st.top();
    st.pop();
    
    bottomsq(st,ele);
}  
    
  
// // middle element
// void getmid(stack<int> &st, int &total) {
//         if(st.size() == 0 ) {
//                 cout << "There is no element in stack" << endl;
//                 return ;
//         }
//         //base case
//         if(st.size() == total/2 + 1) {
//                 cout << "Middle element is: " << st.top() << endl;
//                 return;
//         }
//     int temp=st.top();
//     st.pop();
    
//     getmid(st,total);
    
//     st.push(temp);
    
// }



// // using two stack
// class Stack{
//         public:
//         int *arr;
//         int size;
//         int top1;
//         int top2;

//         Stack(int size) {
//                 arr = new int[size];
//                 this->size = size;
//                 top1 = -1;
//                 top2 = size;
//         }

//         //functions
//         void push1(int data) {
//                 if(top2 - top1 == 1) {
//                         //space not available
//                         cout << "OVERFLOW int stack 1" << endl;
//                 }
//                 else {
//                         //space available
//                         top1++;
//                         arr[top1] = data;
//                 }
//         }

//         void pop1() {
//                 if(top1 == -1) {
//                         //stack empty
//                         cout << "UNDERFLOW in stack 1" << endl;
//                 }
//                 else {
//                         //stack not empty
//                         arr[top1] = 0;
//                         top1--;
//                 }

//         }

//         void push2(int data) {
//                 if(top2 - top1 == 1) {
//                         //space not available
//                         cout << "OVERFLOW in stack 2" << endl;
//                 }
//                 else {
//                         top2--;
//                         arr[top2] = data;
//                 }
//         }

//         void pop2() {
//                 if(top2 == size) {
//                         //stack 2 is empty
//                         cout << "UNDERFLOW in stack 2" << endl;
//                 }
//                 else {
//                         //stack 2 is not empty
//                         arr[top2] = 0;
//                         top2++;
//                 }      
//         }

//         void print() {
//                 cout << endl;
//                 cout << "top1: " << top1 << endl;
//                 cout << "top2: "<< top2 << endl;
//                 for(int i=0; i<size; i++) {
//                         cout << arr[i] << " ";
//                 }cout << endl;
//         }
// };





// {{starting 
// creating stack overation with out using standand lib
// class Stack{
//     public:
//     int size;
//     int* arr;
//     int top;
    
//     Stack(int size){
//         arr=new int[size];
//         this->size=size;
//         top= -1;
//     }


// void push(int data){
//     if(size- top>1){
//         // insertion 
//         top++;
//         arr[top]=data;
//     }
//     else{
//         cout<<" insertio overflow";
//     }
// }
// void pop(){
//     if(top==-1){
//         // already empty;
//         cout<<"empty already";
        
//     }
//     else{
//         top--;
//     }
// }
// int gettop(){
//     if(top==-1){
//         cout<<"no element found";
//     }
//     else{
//         return arr[top];
//     }
// }
// int getsize(){
//     return top+1;
// }
//India vs pak date on 11/09
// bool isempty(){
//     if(top==-1){
//         cout<<"bhai empty stack h ";
//         return true;
        
//     }
//     else{
//         return false;
//     }
    
// }

// };
// }} ending.



int main() {
    
    // string str="Utkarsh Katiyar";
    // stack<char> ch;
    
    // for(int i=0;i<str.length();i++){
    //     ch.push(str[i]);
        
    // }
    // while(!ch.empty()){
    //     cout<<ch.top()<<" ";
    //     ch.pop();
    // }
    // Write C++ code here
    // std::cout << "Hello world!";
   
    
    // st.push2(74);
    // st.push2(54);
    // st.push2(54);
    
    
    // st.push2(94);
    // st.print();
    // cout<<endl;
    
    // while(!st.isempty()){
    //     cout<<st.gettop()<<" ";
    //     st.pop();
    // }
    stack<int> st;

        st.push(10);
        st.push(20);
        st.push(30);
        st.push(40);
        st.push(50);
        st.push(60);
        st.push(70);
        insertatbottom(st);
        while(!st.empty()){
            cout<<st.top()<<" ";
            st.pop();
        }

        // int total = st.size();
        // getmid(st,total);
    

    return 0;
}
