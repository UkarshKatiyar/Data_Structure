#include <iostream>
#include <queue>
using namespace std;
class Node{
    public:
    int data;
    Node* left;
    Node* right;
    Node(int data){
        this->data=data;
        this->left=NULL;
        this->right=NULL;
    }
    
};
Node* insertbst(Node* root,int data){
    if(root==NULL){
        root=new Node(data);
        return root;
    }
    if(root->data>data){
        root->left=insertbst(root->left,data);
    }
    else{
        root->right=insertbst(root->right,data);
    }
    return root;
}
void insert(Node* &root){
    int data;
    cin>>data;
    while(data!=-1){
        root=insertbst(root,data);
        cin>>data;
    }
}
void inorder(Node* root){
    if(root==NULL){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}
bool search(Node* root,int target){
    if(root->data==target){
        return true;
    }
    else{
        if(root->data>target){
            return search(root->left,target);
        }
        else{
            return search(root->right,target);
        }
    }
    return false;
}
int min(Node* root){
    Node* temp=root;
    if(temp==NULL){
        return -1;
    }
    if(temp->left != NULL){
        temp=temp->left;
    }
    return temp->data;
}
int max(Node* root){
    Node* temp=root;
    if(temp==NULL){
        return -1;
    }
    if(temp->right != NULL){
        temp=temp->right;
    }
    return temp->data;
}
Node* findelement(Node* root,int target){
    if(root==NULL){
        return NULL;
    }
    if(root->data==target){
        return root;
    }
    Node* temp=root;
    if((temp->data) > data){
        return findelement(root->left,target);
    }
    else{
        return findelement(root->right,target);
    }
}
Node* delete(Node* root,int target){
    if(root==NULL){
        return NULL;
    }
    Node* temp=findelement(root,target);
    if(temp->left==NULL && temp->right==NULL){
        delete temp;
        return NULL;
        
    }
    if(temp->left!=NULL && temp->right==NULL){
        Node* tes=temp->left;
        delete temp;
        return tes;
    }
    if(temp->right!=NULL && temp->left==NULL){
        Node* child=temp->right;
        delete temp;
        return child;
    }
    if(temp->right!=NULL && temp->left!=NULL){
        int preorderpocess=max(temp->left);
        temp->left=preorderpocess;
        delete(temp->leftpreorderpocess);
        return root;
    }
}
int main() {
    // Write C++ code here
    std::cout << "Hello world!";
    Node* root=NULL;
    cout<<"inorder"<<endl;
    insert(root);
    // cout<<endl<<"inorder tree";
    // inorder(root);
    // int target=3;
    // bool ans=search(root,target);
    // cout<<"answe"<<ans;
    cout<<"minvalue"<<min(root);
    cout<<endl;
    cout<<"maxvalue"<<max(root);

    return 0;
}
