#include <iostream>
#include <queue>
#include <deque>
#include <stack>
using namespace std;
// sliding window concept 
void solve(int arr[],int size,int k){
    deque<int> q;
    for(int i=0;i<k;i++){
        if(arr[i]<0){
            q.push_back(i);
            
        }
    }
    
    
    // remaining window
    for(int i=k;i<size;i++){
        if(q.empty()){
            cout<< 0<<" ";}
        else{
            cout<<arr[q.front()]<<" ";
        } 
        
        while((!q.empty()) && (i-q.front()>=k)){
            q.pop_front();
        }
        
        if(arr[i]<0){
            q.push_back(i);
        }
        if(q.empty()){
            cout<< 0<<" ";}
        else{
            cout<<arr[q.front()]<<" ";
        }
    }
    
    
}





// void interchange(queue <int> &q ){
    
//     int sizeq=q.size();
//     queue<int> newqueue;
//     int sizwqueue;
//     if(sizeq%2==0){
//         sizwqueue=sizeq/2;
//     }
//     else{
//         sizwqueue=sizeq/2 + 1;
//     }
//     int countq=0;
//     while(!q.empty()){
//         while(sizwqueue>0){
//             int temp=q.front();
//             newqueue.push(temp);
//             q.pop();
//             countq++;
//             sizwqueue--;
            
//         }
//         if(sizwqueue==0){
//             break;
//         }
//     }
//     // cout<<"q";
//     // while(!q.empty()){
//     //     cout<<q.front()<<" ";
//     //     q.pop();
//     // }
//     // cout<<endl<<"newqueue";
//     // while(!newqueue.empty()){
//     //     cout<<newqueue.front()<<" ";
//     //     newqueue.pop();
//     // }
//     queue<int>pr;
//     while(newqueue.size()>0 && q.size()>0){
//         int temp=newqueue.front();
//         pr.push(temp);
//         newqueue.pop();
//         count--;
//         int tempo=q.front();
//         pr.push(tempo);
//         q.pop();
//         if(countq!=0){
//             int tem=newqueue.front();
//             pr.push(newqueue);
//             newqueue.pop();
//             count--;
//         }
        
//     }
//     cout<<endl<<"newqueue";
//     while(!pr.empty()){
//         cout<<pr.front()<<" ";
//         pr.pop();
//     }
    
// }




// void rotatedk(queue <int> &q,int k){
//     stack<int> st;
//     while(!q.empty()){
//         int si=q.size();
//         int count=0;
        
//         if(k==0){
//             return ;
//         }
        
//         int temp=q.front();
//         st.push(temp);
//         q.pop();
//         count++;
//         if(k==count){
//             break;
//         }
//         while(!st.empty()){
//             int tem=st.top();
//             q.push(tem);
//             st.pop();
//         }
        
//         count=0;
//         while(!q.empty()){
//             int temp=q.front();
//             q.pop();
//             q.push(temp);
//             count++;
//             if(count=si-k){
//                 break;
//             }
//         }
//         while(!q.empty()){
//         cout<<q.front()<<" ";
//         q.pop();
//     }
        
        
//     }
// }





// void reverse(queue <int> &q){
//     stack <int> st;
//     while(!q.empty()){
//         int temp=q.front();
//         q.pop();
//         st.push(temp);
        
//     }
    
//     while(!st.empty()){
//         int tempo=st.top();
//         st.pop();
//         q.push(tempo);
//     }
//     cout<<" queue after "<<" ";
//     while(!q.empty()){
//         cout<<q.front()<<" ";
//         q.pop();
//     }
    
// }
int main() {
    queue <int> q;
    stack <int> st;
    q.push(3);
    q.push(4);
    q.push(5);
    q.push(6);
    q.push(7);
    q.push(8);
    q.push(9);
    q.push(11);
    q.push(13);
    int k=3;
    
    int arr[]={1,3,-5,-8,2,4,9,7};
    int si=sizeof(arr) / sizeof(int);
    cout<<si;
    cout<<endl<<endl;
    solve(arr,si,k);
    // rotatedk(q,k);
    // cout<<"Queue before reverse"<<"  ";
    // while(!q.empty()){
    //     cout<<q.front()<<" ";
    //     q.pop();
    // }
    // reverse(q); 
    
    // interchange(q);
    
    
    std::cout << "Hello world!";

    return 0;
}
