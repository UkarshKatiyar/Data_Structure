#include <iostream>
#include<queue>
using namespace std;
class Node{
    public:
    int data;
    Node* left;
    Node* right;
    Node(int data){
        this->data=data;
        left=NULL;
        right=NULL;
        
    }
};
void levelorder(Node * root){
    queue<Node*>q;
    q.push(root);
    while(!q.empty()){
        Node* temp=q.front();
        q.pop();
        cout<<temp->data<<" ";
        if(temp->left){
            q.push(temp->left);
        }
        if(temp->right){
            q.push(temp->right);
        }
    }
}
// all type of traversal
void inorderTraversal(Node * root){
    if(root==NULL){
        return;
    }
    inorderTraversal(root->left);
    cout<<root->data<<" ";
    inorderTraversal(root->right);
}

void preorderTraversal(Node * root){
    if(root==NULL){
        return;
    }
    cout<<root->data<<" ";
    preorderTraversal(root->left);
    preorderTraversal(root->right);
}

void postorderTraversal(Node * root){
    if(root==NULL){
        return;
    }
    postorderTraversal(root->left);
    postorderTraversal(root->right);
    cout<<root->data<<" ";
}

Node* bildtree(){
    int data;
    cout<<"enter the data";
    cin>> data;
    if(data==-1){
        return NULL;
    }
    Node* root=new Node(data);
    cout<<"enter for left node"<<data<<endl;
    root->left=bildtree();
    cout<<"enter for left node"<<data<<endl;
    root->right=bildtree();
    return root;
}


int main() {
    
    Node* root=NULL;
    root = bildtree();
    preorder(root);
    std::cout << "Hello world!";
    cout<<endl;
    cout<<"level";
    levelorder(root);

    return 0;
}
